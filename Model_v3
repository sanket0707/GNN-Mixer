from __future__ import print_function
import subprocess
import os
import pdb
import random
from datetime import datetime
curDT = datetime.now()
date_time = curDT.strftime("%Y-%m-%d %H:%M")
from utils.logger import GOATLogger
from copy import deepcopy

import cv2
import numpy as np
import open3d as o3d
import pytorch_lightning as pl
import matplotlib.pyplot as plt

import torch
import torch.nn as nn
import torch.utils.data
import torch.distributed as dist

from .network.get_network import get_network
from utils.common_util import AverageMeter, intersectionAndUnionGPU

seed=0
pl.seed_everything(seed)
np.random.seed(seed)
random.seed(seed)
torch.manual_seed(seed)
torch.cuda.manual_seed(seed)
torch.cuda.manual_seed_all(seed)

class GNN_Mixer(pl.LightningModule):
    def __init__(self, args=None):
        super().__init__()
        
        # Save hyperparameters
        self.save_hyperparameters("args")
        args = self.hparams['args']        
        self.MYCHECKPOINT = deepcopy(args.MYCHECKPOINT)
        self.voxel_size = deepcopy(args.voxel_size)
        self.ignore_label = int(args.ignore_label)
        self.classes = int(args.classes)
        self.print_freq = int(args.print_freq)
        self.optim = deepcopy(args.optim)

        self.train_batch = int(args.train_batch)
        self.val_batch = int(args.val_batch)

        self.distributed_backend = str(args.distributed_backend)

        # Model
        self.model = get_network(args)

        # Metrics
        self.resetMetrics()

        # Logger
        if not bool(args.off_text_logger):
            mode = 'train' if bool(args.on_train) else 'test'
            self.text_logger = GOATLogger(
                mode=mode, 
                save_root=args.MYCHECKPOINT,
                log_freq=0,
                base_name=f'log_{mode}_{date_time}',
                n_iterations=0,
                n_eval_iterations=0)
        else:
            self.text_logger = None
            
                
    def resetMetrics(self):
        self.intersection_meter = AverageMeter()
        self.union_meter = AverageMeter()
        self.target_meter = AverageMeter()
        self.nvox_meter = AverageMeter()

    def forward(self, data_dict):
        pred_dict = {}
        loss_dict = {}

        coord = data_dict['coord']
        feat = data_dict['feat']
        target = data_dict['target']
        offset = data_dict['offset']
        
        output = self.model([coord, feat, offset])
        pred_dict['output'] = output
        if target.shape[-1] == 1:
            target = target[:, 0]  # for cls
        loss = nn.CrossEntropyLoss(ignore_index=self.ignore_label)(output, target)
        loss_dict['loss'] = loss

        return pred_dict, loss_dict
    
    @torch.no_grad()
    def calcMetrics(self, batch_idx, outputs, data_dict, logName='train/accuracy'):
        output = outputs['output'].detach()
        coord = data_dict['coord']
        target = data_dict['target']

        output = output.max(1)[1]
        n = coord.size(0)        
        count = target.new_tensor([n], dtype=torch.long)
        n = count.item()
        intersection, union, target = \
            intersectionAndUnionGPU(output, target, self.classes, self.ignore_label)
        if self.distributed_backend != 'dp':
            dist.all_reduce(intersection)
            dist.all_reduce(union)
            dist.all_reduce(target)
        intersection = intersection.cpu
